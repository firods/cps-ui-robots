/**
 * Functions and objects declarations for Register appliance and related web pages should be automated here
 * Date: 06/1/2016
 * author : Shrikant Firodiya
 * @type {Function}
 *
 */
var frameworkUtils,dashboardUtils,loginUtils;
var framework_Utils = require("../../cp-utils/framework_utils.js");
var dashboard_utils = require("../../cps-dashboard-plugin/utils/dashboard_utils.js");
var login_Utils = require("../../cps-login-plugin/utils/login_utils.js");
var request = require("../../cp-utils/node_modules/request");
var claimcode_json = require("../testdata/dpc-130400.json");

frameworkUtils = new framework_Utils();
dashboardUtils = new dashboard_utils();
loginUtils = new login_Utils();
var client_id,client_secret,access_token,claim_code;

var cpsRegisterappliancePage = ( function() {
    "use strict";
    function cpsRegisterappliancePage() {
        this.txt_claimcode = element(By.model("applianceVm.claimCode"));
        this.btn_register = element(By.xpath("//div/button[contains(text(),'Register')]"));
        this.lbl_blank_error_msg = element(By.xpath("//div/div[contains(text(),'You must enter a code. Please try again')]"));
        this.lbl_register_appliance_title = element(By.xpath("//div/h2[contains(text(),'Register an Appliance')]"));
        this.lbl_register_appliance_msg = element(By.xpath("//div/div[contains(text(),'If you are registering a CloudBoost appliance, copy the claim code generated by the appliance during the installation process and enter it below')]"));
        this.lbl_claimcode = element(By.xpath("//div/span[contains(text(),'Claim Code')]"));
        this.lbl_status = element(By.xpath("//div/span[contains(text(),'Status')]"));
        this.lbl_appliance = element(By.xpath("//div/span[contains(text(),'Appliance')]"));
        this.lbl_invalidcode = element(By.xpath("//div/div[contains(text(),'invalid code')]"));
        this.lbl_invalidcodestatus = element(By.xpath("//*[@id='content']/div[2]/div[2]/div[2]/div[2]/div[2]"));
        this.lbl_loadingicon = element(By.xpath("//*[@id='content']/div[2]/div[2]/div[2]/div[2]/div[2]/div[1]/div/div/div"));
        this.lbl_appliance_url = element(By.xpath("//*[@id='content']/div[2]/div[2]/div[2]/div[2]/div[3]/a[contains(text(),'appliance01.subdomain.domain.com')]"));
    }

    /**
     * Verifies Register appliance message.
     * it accepts zero parameters of String type
     */
    cpsRegisterappliancePage.prototype.verifyRegisterApplianceMessage = function(){
        //Goto Register Appliance
        dashboardUtils.goToRegisterAppliance();

        frameworkUtils.shortWaitForElement();
        browser.ignoreSynchronization = true;

        //click register button.
        this.btn_register.click();
        //verify error message after click register button without entering code..
        expect(this.lbl_blank_error_msg.isDisplayed()).toBe(true);

        //verify register appliance message.
        expect(this.lbl_register_appliance_msg.isDisplayed()).toBe(true);
        //verify page title.
        expect(this.lbl_register_appliance_title.isDisplayed()).toBe(true);
    };

    /**
     * Verifies form gets reset after claim code submit.
     * it accepts zero parameters of String type
     */
    cpsRegisterappliancePage.prototype.verifyFormresetAfterClaimcodeSubmit = function(){
        //Goto Register Appliance
        dashboardUtils.goToRegisterAppliance();

        //short wait.
        frameworkUtils.shortWaitForElement();
        browser.ignoreSynchronization = true;

        //enter dummy claim code.
        this.txt_claimcode.sendKeys("dummy");
        //click register button.
        this.btn_register.click();
        frameworkUtils.shortWaitForElement();

        //verify claim code text field reset.
        expect(this.txt_claimcode.getText()).toEqual('');
        //verify claim code table display with claim-code/status/appliance column.
        expect(this.lbl_claimcode.isDisplayed()).toBe(true);
        expect(this.lbl_status.isDisplayed()).toBe(true);
        expect(this.lbl_appliance.isDisplayed()).toBe(true);
    };

    /**
     * Verifies Invalid claim code status..
     * it accepts zero parameters of String type
     */
    cpsRegisterappliancePage.prototype.verifyInvalidClaimCode = function(){
        //Goto Register Appliance
        dashboardUtils.goToRegisterAppliance();
        //short wait
        frameworkUtils.shortWaitForElement();
        browser.ignoreSynchronization = true;

        //enter invalid claim code.
        this.txt_claimcode.sendKeys("invalid code");
        //click register button.
        this.btn_register.click();

        //verify loading icon.
        expect(this.lbl_loadingicon.isDisplayed()).toBe(true);
        frameworkUtils.waitForElement();

        //verify invalid claim code display in table.
        expect(this.lbl_invalidcode.isDisplayed()).toBe(true);

        //verify invalid claim code status display successfully.
        //expect(this.lbl_invalidcodestatus.isDisplayed()).toBe(true);
        expect(this.lbl_invalidcodestatus.getText()).toEqual('Invalid Code');

        //verify user is on the same page.
        expect(this.lbl_register_appliance_title.isDisplayed()).toBe(true);
    };

    /**
     * Getting claim code.
     * it returns claim code
     */
    cpsRegisterappliancePage.prototype.getClaimCode = function(objThis, selector){

        //get client_id and client_secret.
        var get_token_options = {
            method: 'POST',
            url: 'https://api.int.dpccloud.com/iam/oauth2/register',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': ''
            },
            body: '{"client_name":"'+claimcode_json.client_name+'","software_id": "'+claimcode_json.software_id+'","softdware_serial_number": "'+claimcode_json.software_serialno+'","software_version": "'+claimcode_json.software_version+'","grant_types": ["client_credentials"],"fqdn": "'+claimcode_json.fqdn+'"}'
        };

            console.log("-------- Generate Client and Secret ID -------------------");
            //send api request to get client_id and client_secret.
            request(get_token_options, function (error, response, body1) {
                //retrieve client_id and client_secret from json response.
                client_id = JSON.parse(body1).client_id;
                client_secret = JSON.parse(body1).client_secret;
                console.log("cliend_id=",JSON.parse(body1).client_id);
                console.log("cliend_secret=",JSON.parse(body1).client_secret);
            });

        //get access token.
        setTimeout(function(){
        var get_access_token = {
            method: 'POST',
            url: 'https://api.int.dpccloud.com/iam/oauth2/token',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': 'Basic ' + (new Buffer(client_id +':'+ client_secret).toString('base64'))
            },
            body: 'grant_type=client_credentials&scope=https://api.emc.blue/auth/iam'
        };
            console.log("-------- Generate Access token -------------------");
            //send api request to get access token.
            request(get_access_token, function (error, response, body1) {
                //retrieve access token from json response.
                access_token = JSON.parse(body1).access_token;
                console.log("access_token=",JSON.parse(body1).access_token);
                frameworkUtils.waitForElement();
            });
        },20000);

        //get claim-code.
        setTimeout(function(){
        var get_claimcode = {
            method: 'POST',
            url: 'https://api.int.dpccloud.com/iam/agents/'+client_id+'/claim_code',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + access_token
            },
        };
            console.log("-------- Generating claim code -------------------");
            //send api request to get valid claim-code.
            request(get_claimcode, function (error, response, body1) {
                var claim_code = JSON.parse(body1).claim_code;
                selector.sendKeys(claim_code);
                //retrive claim code from json response.
                console.log("claimcode=", JSON.parse(body1).claim_code);
                frameworkUtils.waitForElement();
                browser.ignoreSynchronization = true;

                //click register button.
                objThis.btn_register.click();
                frameworkUtils.waitForElement();

                //enter claim code second time.
                selector.sendKeys(claim_code);
                //click register button.
                objThis.btn_register.click();
                frameworkUtils.waitForElement();

                //set value to claim-code textbox.
                browser.driver.executeScript('document.getElementById("register-appliance").value = "'+claim_code+'"');

                //get corresponding claim-code status.
                browser.driver.executeScript(function(){
                var data=[];
                     //pass claim code for retrieving status.
                    $('div.ng-scope.ft-row div:nth-child(1):contains('+document.getElementById("register-appliance").value +')').parent().each(function()
                    {
                        data.push($(this).find('.ft-status.ng-binding:first').text().trim());
                    });
                    return data;
                }).then(function(status)
                {
                    //verify registered status for claim-code.
                    expect(status[0]).toEqual('Expired Code or Already Claimed');//verify second claim code status.
                    expect(status[1]).toEqual('Registered');//verify first claim code status.
                });
                frameworkUtils.waitForElement();
            });
        },25000);
    };

    /**
     * Verifies valid claim code should be registered.
     * it accepts zero parameters of String type
     */
    cpsRegisterappliancePage.prototype.verifyRegisterValidClaimCode = function(){

        //Goto Register Appliance
        dashboardUtils.goToRegisterAppliance();
        frameworkUtils.waitForElement();

        //call get_claimcode function to register claim-code.
        var objThis = this;
        setTimeout(function(){
            objThis.getClaimCode(objThis,element(By.model("applianceVm.claimCode")));
        },40000) ;
    };
    return cpsRegisterappliancePage;
})();

module.exports = cpsRegisterappliancePage;